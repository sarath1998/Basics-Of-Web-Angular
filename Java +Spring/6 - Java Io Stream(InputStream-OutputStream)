Taking input in Java

2 ways. Using either the 

1. Scanner class
2. BufferredReader class

Let's discuss BufferedReader 

BufferedReader expects a ***stream*** of characters.


What's a stream?

A stream is a sequence of data.

2 types of Java streams

1. Byte Stream/ByteStream classes -- Used to read and write 8-bit(1 byte) data. (https://www.javatpoint.com/bytestream-classes-in-java)

		Classifed into 2 types again
		
		  1.1 : InputStream -- This type of java stream reads data from a source. 
			                     An InputStream can read data from a file, network connection, or any other I/O device. An InputStream can be used to read data from a file.
													 
						Syntax --
                                FileInputStream sourceStream = new FileInputStream("path_to_file");
																													
														
			1.2 : OutputStream -- The outputstream is a java stream that takes data from a Java program and sends or writes it to the destination (data sink).
			
							Syntax -- 
								FileOutputStream targetStream = new FileOutputStream("path_to_file");
													
			
			Briefly, The data flow from a data source --> Java program =======  input stream. 
			         The data flow from a Java program --> data sink ========= output stream
							 

		Refer eg program and explanation -- https://www.prepbytes.com/blog/java/streams-in-java/#:~:text=Example%20of%20Byte%20Java%20Stream%3A							 
			

2. Character Stream/CharacterStream classes -- used for 16-bit Unicode input and output operations. (https://www.javatpoint.com/characterstream-classes-in-java)
																							 
												CharacterStream classes are used to work with Unicode characters that are 16 bits in length. 
												They can work with characters, char arrays, and Strings.
																							 
												The CharacterStream classes, on the other hand, are primarily used to read characters from the source 
												and write them to the destination.


		Based on the primary purpose, this stream is classified into 2 types again
		
		  2.1 Reader classes -- Most common Reader class : "FileReader"
			
											FileReader class -- 
														It is used to read two bytes at a time from the source.
														
														Syntax : FileWriter in = new FileWriter("path_to_file");
			
			
			2.2 Writer classes -- Most common Reader class : "FileWriter"
			
										  FileWriter class -- 
														 is used to write two bytes at a time to the destination
														
														Syntax : FileWriter in = new FileWriter("path_to_file");
														
Eg program -- https://www.prepbytes.com/blog/java/streams-in-java/#:~:text=Example%20of%20Character%20Java%20Stream%3A

Note: 1. The classes using either of the streams has to implement the Checked exception. After all, these streams are related to the files.

      2. The above example programs contains the **unbuffered streams & are **less efficient. We typically ***use them with buffered readers/writers for efficiency.
          We will soon be discussing use  **** BufferedInputStream/BufferedOutputStream (for byte stream) classes 
		                              and **** BufferedReader/BufferedWriter (for character stream) 
									  
      3. Names of character streams typically end with Reader/Writer and 
			   names of byte streams end with InputStream/OutputStream																																	
					                               
																					
					  Refer : https://www.geeksforgeeks.org/character-stream-vs-byte-stream-java/#:~:text=The%20streams%20used%20in%20example%20codes%20are%20unbuffered%20streams



InputStreamReader class -- A CharacterStream class(suffix -- "Reader")
						-- is a bridge from byte streams to character streams. It reads bytes and decodes them into characters using a specified charset.
                        -- The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted

            Refer -- Constructors to see which type of objects it accepts.

Eg: 

public class InputStreamReaderExample {  
    public static void main(String[] args) {  
        try  {  
            InputStream stream = new FileInputStream("file.txt");  // "FileInputStream" class is a byteStream class, which is converting the data in the file to bytes.
            Reader reader = new InputStreamReader(stream);         //  ***InputStreamReader class accepting the ByteStream object.. there by converting it into a 
						                                                           CharacterStream as the content in the .txt file will be Strings
            int data = reader.read();  
            while (data != -1) {  
                System.out.print((char) data);  
                data = reader.read();  
            }  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
    }  
}  

						




As per Note 2), the performance can be enhanced with the use of the **Buffered prefix classes. 
The most common example.. taking the user input in a simple java program using the BufferedReader object accepting the InputStreamReader object in the constructor.

Eg: BufferReader class constructor accepting the other ReaderClass object

package com.javatpoint;  
import java.io.*;  
public class BufferedReaderExample{    
public static void main(String args[])throws Exception{             
    InputStreamReader r=new InputStreamReader(System.in);    
    BufferedReader br=new BufferedReader(r);            // Here BufferedReader constructor(Right Hand Side) accepting the "InputStreamReader" class object.
		                                                       // Open BufferReader class to see the constructors.
    System.out.println("Enter your name");    
    String name=br.readLine();    
    System.out.println("Welcome "+name);    
}    
}  

O/p -- 

Enter your name
Nakul Jain
Welcome Nakul Jain



Refer -- https://www.javatpoint.com/java-bufferedreader-class#:~:text=Reading%20data%20from%20console%20by%20InputStreamReader%20and%20BufferedReader

Note: 

Conclusion

Byte streams are used to perform input and output of 8-bit bytes
The character stream is used to perform 16-bit Unicode input and output operations. Character streams are used to read and write characters
				



Why Character Streams when Byte Stream existis?
														
Java characters are 2 bytes (or 16 bits) in size. CharacterStream classes are provided by the java.io package to overcome 
the limitations of ByteStream classes, which can only handle 8-bit bytes and are incompatible with working ***directly with 
Unicode characters. 
																	
			

I/O Stream means an input source or output destination representing different types of sources e.g. disk files. The java.io package provides classes that allow you 
to convert between Unicode character streams and byte streams of non-Unicode text.

Input Stream: reads data from the source. 
Output Stream: writes data to a destination. 



