Java streams : 

  -- Overview, what is meant by Terminal, Intermediate op?
 
  https://www.geeksforgeeks.org/stream-in-java/
  
  -- List of Intermediate and Terminal op 
  
    https://javaconceptoftheday.com/java-8-stream-intermediate-and-terminal-operations/#:~:text=6)%20Intermediate%20Operations 
	
  -- What is Stream Pipeline

     https://www.baeldung.com/java-8-streams#:~:text=4.-,Stream%20Pipeline,-To%20perform%20a  

   
   -- reduce() inside the stream eg link 
   
   https://www.geeksforgeeks.org/generics-in-java/
   
   
   -- Primitive versions of Stream : IntStream, LongStream, DoubleStream
   
       In general, Stream will have Generics enabled and as its not possible to declare the primitive types for the Genrics, Java8 team has proposed the 
	   primitive type Stream interfaces
	   
	    IntStream, LongStream, DoubleStrem
		
	   Note: Apart from the Genrics thing, there is also another use case.. For eg: Say a map method want to retreive the actual int value from the String.. With the regular map..
	         the Integer version of them is returned .. So again auto-boxing and auto-unboxing needs to be done which will take time ..
			 
	   
	   -- Creating the Primitive Streams:
	      
		    1. Using self **static methods** defined in there interface say 
			
			    range(), rangeClosed(), of()
			
			
			  Eg 1 : range(begin, end value) -- excludes the end value and inclusive of the begin value
			  
			    import java.util.stream.IntStream;

				public class IntStreamExample {
					public static void main(String[] args) {
						// Using range to create an IntStream from 1 to 5 (exclusive upper bound)
						IntStream intStream = IntStream.range(1, 6);

						// Performing operations on the IntStream
						intStream.forEach(System.out::println); // Prints integers from 1 to 5
					}
				}
				
				O/p : 1
					  2
					  3					  
					  4
					  5
					  
					  
				Explanation : Line 57, uses the static method range.. and uses the interface "IntStream" directly

                            				
					  
					  
				Eg 2: rangeOf(begin, end) -- both begin and endValues will be inclusive
				      of(T .... varargs) -- accepts any type n number of elements as input and convets the input to Stream.  

                    import java.util.stream.LongStream;
					import java.util.stream.DoubleStream;

					public class LongDoubleStreamExample {
						public static void main(String[] args) {
							// Creating a LongStream using rangeClosed from 1 to 5 (inclusive upper bound)
							LongStream longStream = LongStream.rangeClosed(1, 5);

							// Creating a DoubleStream using of method
							DoubleStream doubleStream = DoubleStream.of(1.5, 2.5, 3.5);

							// Performing operations on the LongStream
							longStream.forEach(System.out::println); // Prints long values from 1 to 5

							// Performing operations on the DoubleStream
							doubleStream.forEach(System.out::println); // Prints double values 1.5, 2.5, 3.5
						}
					}
				
			       		  

			
			2. Using the Stream class in-built methods..
			
			    2.1 IntStream mapToInt(<Function>)
				2.2 DoubleStream mapToDouble(<Function>)
				2.3 LongStream mapToLong(<Function>)
				
				NotE: All the 3 methods are instance methods. So, we simply trigger them on the Stream reference.
				      Each method will take the Function (a functional interface.. we need to provide the lamda expression implemnting its abstract method or any method reference)
					  The return type of each method will be also a stream(i.e respective Streamtype) .. that will hold only the respective primitive type values.
					  
					  For eg: mapToInt() will return the IntStream object.. So, we can perform further intermediate op declared inside this interface for the new IntStream generated.
					  
					  
					  Below code, shows the usage of mapToInt() .. that return the IntStream from the Stram object and followed by triggering the terminal op : forEach on top of IntStream.
					  
					  
                   		import java.util.Arrays;
						import java.util.stream.IntStream;
						import java.util.stream.Stream;

						public class MapToPrimitiveStreamExample {
							public static void main(String[] args) {
								// Creating a Stream<String>
								Stream<String> stringStream = Arrays.stream(new String[]{"1", "2", "3", "4", "5"});

								// Using mapToInt to convert Stream<String> to IntStream
								IntStream intStream = stringStream.mapToInt(Integer::parseInt);

								// Performing operations on the IntStream
								intStream.forEach(System.out::println); // Prints integers 1 to 5
							}
						}

			-- There are many other in-built methods defined inside the primitive Streams specific to each of them. (Refer docs)
			
				          
	   
	   

Java Collectors : 

https://www.geeksforgeeks.org/java-collectors/

Java Generics : 

https://www.geeksforgeeks.org/generics-in-java/


Streams & Generics :

https://javabydeveloper.com/core-java/ 


